const fs = require('fs');
const path = require('path');
const pdf = require('pdf-parse');

/**
 * Script pour extraire les donn√©es des PDFs de dictionnaire et le√ßons
 * 
 * Structure attendue des PDFs :
 * 
 * DICTIONNAIRE :
 * - Format : mot (PT: traduction) (CV: traduction) Exemple: phrase
 * 
 * LE√áONS :
 * - Format : Titre de la le√ßon suivi du contenu
 */

// Chemins des fichiers
const PDF_DIR = path.join(__dirname, '../pdfs');
const OUTPUT_DIR = path.join(__dirname, '../src/data');

/**
 * Extrait le texte d'un PDF
 */
async function extractTextFromPdf(pdfPath) {
  try {
    const dataBuffer = fs.readFileSync(pdfPath);
    const data = await pdf(dataBuffer);
    return data.text;
  } catch (error) {
    console.error(`Erreur lors de la lecture du PDF ${pdfPath}:`, error);
    return null;
  }
}

/**
 * Parse le texte du dictionnaire et extrait les entr√©es
 * Format attendu : chaque ligne contient un mot avec sa traduction
 */
function parseDictionaryText(text) {
  const entries = [];
  const lines = text.split('\n').filter(line => line.trim());
  
  let currentId = 1;
  
  for (const line of lines) {
    // Ignorer les lignes de titre ou num√©ros de page
    if (line.match(/^\d+$/) || line.length < 3) continue;
    
    // Essayer de parser diff√©rents formats
    // Format 1: mot - PT: traduction - CV: traduction
    const match1 = line.match(/^(.+?)\s*-\s*PT:\s*(.+?)\s*-\s*CV:\s*(.+?)(?:\s*-\s*Ex[^:]*:\s*(.+))?$/i);
    
    // Format 2: mot (PT) (CV)
    const match2 = line.match(/^(.+?)\s*\((.+?)\)\s*\((.+?)\)(?:\s*Ex[^:]*:\s*(.+))?$/i);
    
    // Format 3: mot PT: traduction CV: traduction
    const match3 = line.match(/^(.+?)\s+PT:\s*(.+?)\s+CV:\s*(.+?)(?:\s+Ex[^:]*:\s*(.+))?$/i);
    
    let match = match1 || match2 || match3;
    
    if (match) {
      const [, word, ptTranslation, cvTranslation, example] = match;
      
      entries.push({
        id: `word-${currentId++}`,
        word: word.trim(),
        translation: {
          pt: ptTranslation.trim(),
          cv: cvTranslation.trim()
        },
        example: example ? {
          pt: example.trim(),
          cv: example.trim() // Adapter si les exemples sont s√©par√©s
        } : {
          pt: '',
          cv: ''
        }
      });
    }
  }
  
  return entries;
}

/**
 * Parse le texte des le√ßons et extrait le contenu
 */
function parseLessonsText(text) {
  const lessons = [];
  
  // Diviser par sections (bas√© sur les titres)
  const sections = text.split(/(?=Li√ß√£o \d+|Lesson \d+)/i);
  
  for (const section of sections) {
    if (section.trim().length < 50) continue;
    
    const lines = section.split('\n');
    const title = lines[0].trim();
    const content = lines.slice(1).join('\n').trim();
    
    if (title && content) {
      lessons.push({
        title,
        content,
        // D√©terminer la cat√©gorie bas√©e sur des mots-cl√©s
        category: detectCategory(title + ' ' + content)
      });
    }
  }
  
  return lessons;
}

/**
 * D√©tecte la cat√©gorie d'une le√ßon bas√©e sur son contenu
 */
function detectCategory(text) {
  const lowerText = text.toLowerCase();
  
  if (lowerText.includes('pronome') || lowerText.includes('pronoun')) return 'Pronomes';
  if (lowerText.includes('verbo') || lowerText.includes('verb')) return 'Verbos';
  if (lowerText.includes('sintaxe') || lowerText.includes('syntax') || lowerText.includes('frase')) return 'Sintaxe';
  if (lowerText.includes('morfologia') || lowerText.includes('plural') || lowerText.includes('forma√ß√£o')) return 'Morfologia';
  if (lowerText.includes('fonologia') || lowerText.includes('som') || lowerText.includes('pron√∫ncia')) return 'Fonologia';
  if (lowerText.includes('vocabul√°rio') || lowerText.includes('vocabulary')) return 'Vocabul√°rio';
  if (lowerText.includes('pr√°tica') || lowerText.includes('di√°logo') || lowerText.includes('conversa')) return 'Pr√°tica';
  
  return 'Geral';
}

/**
 * G√©n√®re le fichier TypeScript pour le dictionnaire
 */
function generateDictionaryFile(entries) {
  const content = `// Fichier g√©n√©r√© automatiquement √† partir des PDFs
// Ne pas modifier manuellement

export interface DictionaryEntry {
  id: string;
  word: string;
  translation: {
    pt: string;
    cv: string;
  };
  example: {
    pt: string;
    cv: string;
  };
  note?: string;
}

export const dictionaryData: DictionaryEntry[] = ${JSON.stringify(entries, null, 2)};

export default dictionaryData;
`;

  const outputPath = path.join(OUTPUT_DIR, 'dictionaryData.ts');
  fs.writeFileSync(outputPath, content, 'utf8');
  console.log(`‚úÖ Fichier dictionnaire g√©n√©r√©: ${outputPath}`);
  console.log(`   ${entries.length} entr√©es cr√©√©es`);
}

/**
 * G√©n√®re le fichier TypeScript pour les le√ßons
 */
function generateLessonsFile(lessons) {
  const content = `// Fichier g√©n√©r√© automatiquement √† partir des PDFs
// Ne pas modifier manuellement

export interface Lesson {
  id: number;
  title: string;
  description: string;
  level: 'Iniciante' | 'Intermedi√°rio' | 'Avan√ßado';
  category: 'Fonologia' | 'Morfologia' | 'Sintaxe' | 'Verbos' | 'Pronomes' | 'Vocabul√°rio' | 'Pr√°tica' | 'Geral';
  icon: string;
}

export const lessonsData: Lesson[] = ${JSON.stringify(lessons, null, 2)};

export default lessonsData;
`;

  const outputPath = path.join(OUTPUT_DIR, 'lessonsData.ts');
  fs.writeFileSync(outputPath, content, 'utf8');
  console.log(`‚úÖ Fichier le√ßons g√©n√©r√©: ${outputPath}`);
  console.log(`   ${lessons.length} le√ßons cr√©√©es`);
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üöÄ Extraction des donn√©es des PDFs...\n');
  
  // Cr√©er le dossier de sortie s'il n'existe pas
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }
  
  // Cr√©er le dossier PDFs s'il n'existe pas
  if (!fs.existsSync(PDF_DIR)) {
    fs.mkdirSync(PDF_DIR, { recursive: true });
    console.log(`üìÅ Dossier cr√©√©: ${PDF_DIR}`);
    console.log('   Placez vos PDFs dans ce dossier et relancez le script.\n');
    return;
  }
  
  // Lister tous les PDFs
  const pdfFiles = fs.readdirSync(PDF_DIR).filter(file => file.endsWith('.pdf'));
  
  if (pdfFiles.length === 0) {
    console.log('‚ùå Aucun fichier PDF trouv√© dans le dossier pdfs/');
    console.log(`   Placez vos PDFs dans: ${PDF_DIR}\n`);
    return;
  }
  
  console.log(`üìö ${pdfFiles.length} fichier(s) PDF trouv√©(s):\n`);
  pdfFiles.forEach(file => console.log(`   - ${file}`));
  console.log('');
  
  let allDictionaryEntries = [];
  let allLessons = [];
  
  // Traiter chaque PDF
  for (const pdfFile of pdfFiles) {
    const pdfPath = path.join(PDF_DIR, pdfFile);
    console.log(`\nüìñ Traitement de: ${pdfFile}`);
    
    const text = await extractTextFromPdf(pdfPath);
    
    if (!text) {
      console.log(`   ‚ö†Ô∏è  Impossible de lire le PDF`);
      continue;
    }
    
    console.log(`   ‚úì Texte extrait (${text.length} caract√®res)`);
    
    // D√©terminer le type de PDF bas√© sur le nom du fichier
    const fileName = pdfFile.toLowerCase();
    
    if (fileName.includes('dicionario') || fileName.includes('dictionary') || fileName.includes('dict')) {
      console.log('   ‚Üí Type: Dictionnaire');
      const entries = parseDictionaryText(text);
      allDictionaryEntries = allDictionaryEntries.concat(entries);
      console.log(`   ‚úì ${entries.length} mots extraits`);
    } 
    else if (fileName.includes('licao') || fileName.includes('lesson') || fileName.includes('gramatica') || fileName.includes('grammar')) {
      console.log('   ‚Üí Type: Le√ßons');
      const lessons = parseLessonsText(text);
      allLessons = allLessons.concat(lessons);
      console.log(`   ‚úì ${lessons.length} le√ßons extraites`);
    }
    else {
      console.log('   ‚ö†Ô∏è  Type non reconnu (renommez le fichier avec "dicionario" ou "licao")');
    }
  }
  
  // G√©n√©rer les fichiers de sortie
  console.log('\nüìù G√©n√©ration des fichiers...\n');
  
  if (allDictionaryEntries.length > 0) {
    generateDictionaryFile(allDictionaryEntries);
  }
  
  if (allLessons.length > 0) {
    generateLessonsFile(allLessons);
  }
  
  console.log('\n‚úÖ Extraction termin√©e avec succ√®s!\n');
  console.log('üìä R√©sum√©:');
  console.log(`   - ${allDictionaryEntries.length} mots de dictionnaire`);
  console.log(`   - ${allLessons.length} le√ßons`);
  console.log('');
}

// Ex√©cuter le script
main().catch(console.error);
