const fs = require('fs');
const path = require('path');

// Chemins
const dictPath = path.join(__dirname, '../src/data/dictionaryData.ts');

// Mappings de catÃ©gories basÃ©s sur mots-clÃ©s
const categoryMappings = {
  'PregaÃ§Ã£o': [
    'anunciar', 'proclamar', 'pregar', 'mensagem', 'boa nova', 'testemunhar', 'evangelizar',
    'anÃºncio', 'proclamaÃ§Ã£o', 'pregador', 'testemunha', 'evangelho'
  ],
  'BÃ­blia': [
    'biblia', 'escritura', 'livro sagrado', 'palavra de deus', 'sagrada escritura',
    'escrituras', 'texto bÃ­blico', 'versÃ­culo', 'capÃ­tulo', 'livro'
  ],
  'ReligiÃ£o': [
    'deus', 'jesus', 'cristo', 'espirito santo', 'santo', 'divino', 'religiÃ£o',
    'fÃ©', 'crente', 'cristÃ£o', 'igreja', 'congregaÃ§Ã£o', 'reuniÃ£o'
  ],
  'EsperanÃ§a': [
    'esperanÃ§a', 'futuro', 'vida eterna', 'paraÃ­so', 'ressurreiÃ§Ã£o', 'salvaÃ§Ã£o',
    'promessa', 'confianÃ§a', 'otimismo'
  ],
  'Sofrimento': [
    'sofrimento', 'dor', 'problema', 'tristeza', 'angÃºstia', 'dificuldade',
    'provaÃ§Ã£o', 'tribulaÃ§Ã£o', 'dor fÃ­sica', 'dor emocional'
  ],
  'FamÃ­lia': [
    'famÃ­lia', 'pai', 'mÃ£e', 'filho', 'filha', 'irmÃ£o', 'irmÃ£', 'marido', 'esposa',
    'pai de famÃ­lia', 'mÃ£e de famÃ­lia', 'parentes'
  ],
  'Vida': [
    'vida', 'morte', 'nascimento', 'existÃªncia', 'vivÃªncia', 'sobrevivÃªncia'
  ],
  'Pecado': [
    'pecado', 'mal', 'errado', 'transgressÃ£o', 'culpa', 'arrependimento'
  ],
  'PerdÃ£o': [
    'perdoar', 'perdÃ£o', 'misericÃ³rdia', 'graÃ§a', 'clemÃªncia', 'absolviÃ§Ã£o'
  ],
  'OraÃ§Ã£o': [
    'orar', 'rezar', 'oraÃ§Ã£o', 'prece', 'sÃºplica', 'agradecimento'
  ],
  'Reino de Deus': [
    'reino', 'governo', 'soberania', 'reinado', 'domÃ­nio divino'
  ]
};

// Fonction pour dÃ©terminer la catÃ©gorie
function getCategory(entry) {
  const text = `${entry.word} ${entry.translation.pt} ${entry.translation.cv}`.toLowerCase();

  for (const [category, keywords] of Object.entries(categoryMappings)) {
    if (keywords.some(keyword => text.includes(keyword))) {
      return category;
    }
  }

  return 'Geral'; // CatÃ©gorie par dÃ©faut
}

// Lire le fichier
console.log('Lecture du fichier dictionaryData.ts...');
const content = fs.readFileSync(dictPath, 'utf8');

// Trouver la partie donnÃ©es (aprÃ¨s le =)
const startIndex = content.indexOf('= [') + 2;
const endIndex = content.lastIndexOf('];');

if (startIndex === -1 || endIndex === -1) {
  console.error('Format du fichier non reconnu');
  process.exit(1);
}

const dataPart = content.substring(startIndex, endIndex + 1);
let dictionaryData;

try {
  // Ã‰valuer le tableau (risquÃ© mais nÃ©cessaire pour gros fichiers)
  dictionaryData = eval(dataPart);
} catch (e) {
  console.error('Erreur lors du parsing des donnÃ©es:', e);
  process.exit(1);
}

console.log(`Traitement de ${dictionaryData.length} entrÃ©es...`);

// Ajouter les catÃ©gories
dictionaryData.forEach(entry => {
  entry.category = getCategory(entry);
});

// GÃ©nÃ©rer le nouveau contenu
const newDataPart = JSON.stringify(dictionaryData, null, 2);
const newContent = content.substring(0, startIndex) + newDataPart + content.substring(endIndex + 1);

// Ã‰crire le fichier
fs.writeFileSync(dictPath, newContent, 'utf8');

console.log('âœ… CatÃ©gories ajoutÃ©es avec succÃ¨s!');
console.log('ðŸ“Š RÃ©sumÃ© des catÃ©gories:');

const categoryCount = {};
dictionaryData.forEach(entry => {
  categoryCount[entry.category] = (categoryCount[entry.category] || 0) + 1;
});

Object.entries(categoryCount).sort((a, b) => b[1] - a[1]).forEach(([cat, count]) => {
  console.log(`  ${cat}: ${count} mots`);
});